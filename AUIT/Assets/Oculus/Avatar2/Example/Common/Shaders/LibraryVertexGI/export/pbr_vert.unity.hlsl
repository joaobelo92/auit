// Generated by AvatarShaderLibrary 242d0d331a49



struct avatar_VertOptions
{
    bool enableNormalMapping;
    bool enableAlphaToCoverage;
    bool enableSkin;
    bool enableEyeGlint;
};

struct avatar_AvatarVertexInput
{
    float4 position;
    float3 normal;
    float3 tangent;
    float2 texcoord0;
    float2 texcoord1;
    float4 color;
    float4 ormt;
    float3 ambient;
    avatar_VertOptions options;
};





static float4 a_Position;
static float4 a_Normal;
static float4 a_Tangent;
static uint a_instanceID;
static uint a_vertexID;
static float2 a_UV1;
static float2 a_UV2;
static float4 a_Color;
static float4 a_ORMT;
static float4 v_Vertex;
static float3 v_WorldPos;
static float3 v_Normal;
static float4 v_Tangent;
static uint v_InstanceID;
static float2 v_UVCoord1;
static float2 v_UVCoord2;
static float4 v_Color;
static float4 v_ORMT;
static float3 v_SH;






avatar_VertOptions getVertOptions()
{
    avatar_VertOptions options;
    options.enableNormalMapping = enableNormalMapping;
    options.enableAlphaToCoverage = enableAlphaToCoverage;
    options.enableSkin = enableSkin;
    options.enableEyeGlint = enableEyeGlint;
    return options;
}

void vert_Vertex_main()
{
    OvrVertexData ovrData = OvrCreateVertexData(float4(a_Position.xyz, 1.0f), a_Normal.xyz, a_Tangent, a_vertexID);
    avatar_AvatarVertexInput vin;
    vin.position = ovrData.position;
    vin.normal = ovrData.normal;
    vin.tangent = ovrData.tangent.xyz;
    VertexInput vertexInput;
    vertexInput.uv0 = a_UV1;
    vertexInput.uv0 = a_UV2;
    vin.ambient = VertexGIForward(vertexInput, vin.position.xyz, vin.normal).xyz;
    vin.texcoord0 = a_UV1;
    vin.texcoord1 = a_UV2;
    vin.color = a_Color;
    vin.ormt = a_ORMT;
    vin.options = getVertOptions();
    v_UVCoord1 = vin.texcoord0;
    v_UVCoord2 = vin.texcoord1;
    v_Color = vin.color;
    v_ORMT = vin.ormt;
    v_SH = vin.ambient;
    v_Vertex = getVertexInClipSpace(vin.position.xyz / vin.position.w.xxx);
    float4 worldPos = mul(unity_ObjectToWorld, vin.position);
    v_WorldPos = worldPos.xyz / worldPos.w.xxx;
    v_Normal = normalize(mul(float4(vin.normal, 0.0f), unity_WorldToObject).xyz);
    v_Tangent = normalize(mul(float4(vin.tangent, 0.0f), unity_WorldToObject));
    v_InstanceID = a_instanceID;
}

VertexToFragment Vertex_main(AvatarVertexInput stage_input)
{
    a_Position = stage_input.a_Position;
    a_Normal = stage_input.a_Normal;
    a_Tangent = stage_input.a_Tangent;
    a_instanceID = stage_input.a_instanceID;
    a_vertexID = stage_input.a_vertexID;
    a_UV1 = stage_input.a_UV1;
    a_UV2 = stage_input.a_UV2;
    a_Color = stage_input.a_Color;
    a_ORMT = stage_input.a_ORMT;
    vert_Vertex_main();
    VertexToFragment stage_output;
    stage_output.v_Vertex = v_Vertex;
    stage_output.v_WorldPos = v_WorldPos;
    stage_output.v_Normal = v_Normal;
    stage_output.v_Tangent = v_Tangent;
    stage_output.v_InstanceID = v_InstanceID;
    stage_output.v_UVCoord1 = v_UVCoord1;
    stage_output.v_UVCoord2 = v_UVCoord2;
    stage_output.v_Color = v_Color;
    stage_output.v_ORMT = v_ORMT;
    stage_output.v_SH = v_SH;
    return stage_output;
}

// Generated by AvatarShaderLibrary 242d0d331a49

