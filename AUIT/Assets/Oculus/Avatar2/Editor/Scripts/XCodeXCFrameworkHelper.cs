// (c) Meta Platforms, Inc. and affiliates. Confidential and proprietary.

// This script adds .dylib library files to the xcode project
// generated by Unity.

#if UNITY_IOS

using System;
using System.IO;
using UnityEditor.iOS.Xcode;
using UnityEngine;
using System.Collections.Generic;

namespace Oculus.Avatar2
{
    public class XcodeXCFrameworkHelper
    {
        // Create and add a "Copy Files" build phase to add the XCFrameworks to the Xcode project
        public static void AddXCFrameworksToXcodeProject(string pathToBuiltProject, string[] xcFrameworksPaths, string buildPhaseName)
        {
            string projectPath = PBXProject.GetPBXProjectPath(pathToBuiltProject);

            PBXProject project = new PBXProject();
            project.ReadFromString(File.ReadAllText(projectPath));

            var unityMainTarget = project.GetUnityMainTargetGuid();
            var unityFrameworkTarget = project.GetUnityFrameworkTargetGuid();

            var frameworksBuildPhaseUnityFrameworkTarget = project.GetFrameworksBuildPhaseByTarget(unityFrameworkTarget);

            // Add each XCFramework to the build phase
            foreach (var xcFrameworksPath in xcFrameworksPaths)
            {
                string pluginDir = Path.Combine(Application.dataPath, xcFrameworksPath);
                if (Directory.Exists(pluginDir))
                {
                    DirectoryInfo dirInfo = new DirectoryInfo(pluginDir);
                    foreach (var xcFramework in dirInfo.GetDirectories("*.xcframework"))
                    {
                        var whereToAdd = "Frameworks/" + xcFramework.Name;
                        var xcFrameworkGuid = project.AddFile(xcFramework.ToString(), whereToAdd, PBXSourceTree.Sdk);
                        UnityEditor.iOS.Xcode.Extensions.PBXProjectExtensions.AddFileToEmbedFrameworks(project, unityMainTarget, xcFrameworkGuid);
                        project.AddFileToBuildSection(unityFrameworkTarget, frameworksBuildPhaseUnityFrameworkTarget, xcFrameworkGuid);
                        OvrAvatarLog.LogInfo($"Added {xcFramework.Name} to the Xcode project.");

                        // Remove any frameworks automatically added by Unity
                        foreach (var framework in xcFramework.GetDirectories("*.framework", SearchOption.AllDirectories))
                        {
                            string frameworkRelativePath = framework.FullName.Substring(xcFramework.FullName.Length + 1);
                            string frameworkProjectPath = $"Frameworks/{xcFrameworksPath}{xcFramework.Name}/{frameworkRelativePath}";
                            string frameworkGuid = project.FindFileGuidByProjectPath(frameworkProjectPath);

                            if (frameworkGuid != null) {
                                OvrAvatarLog.LogInfo($"Duplicate framework {frameworkRelativePath} for {xcFramework.Name} found, removing from Xcode project.");
                                project.RemoveFileFromBuild(unityFrameworkTarget, frameworkGuid);
                                project.RemoveFile(frameworkGuid);
                            }
                        }
                    }
                }
            }

            string projectSettings = project.WriteToString();
            File.WriteAllText(projectPath, projectSettings);
        }
    }
}

#endif
